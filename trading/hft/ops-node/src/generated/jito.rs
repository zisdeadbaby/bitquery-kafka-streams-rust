// This file is @generated by prost-build.
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendBundleRequest {
    /// A bundle is typically a list of serialized VersionedTransaction.
    ///
    /// Each 'bytes' is a serialized VersionedTransaction
    #[prost(bytes = "vec", repeated, tag = "1")]
    #[allow(missing_docs)]
    pub transactions: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// Bundles might also have metadata, like tip information if not included in transactions.
    #[prost(message, optional, tag = "2")]
    #[allow(missing_docs)]
    pub tip_info: ::core::option::Option<BundleTip>,
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BundleTip {
    /// Pubkey of the Jito tip account
    #[prost(bytes = "vec", tag = "1")]
    #[allow(missing_docs)]
    pub tip_account: ::prost::alloc::vec::Vec<u8>,
    /// Tip amount in lamports
    #[prost(uint64, tag = "2")]
    #[allow(missing_docs)]
    pub amount: u64,
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendBundleResponse {
    /// UUID or some identifier for the submitted bundle
    #[prost(string, tag = "1")]
    #[allow(missing_docs)]
    pub bundle_id: ::prost::alloc::string::String,
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeShredsRequest {
    /// Filters for regions, specific shreds, etc.
    ///
    /// e.g., "frankfurt", "newyork"
    #[prost(string, tag = "1")]
    #[allow(missing_docs)]
    pub region: ::prost::alloc::string::String,
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Shred {
    /// Raw shred data
    #[prost(bytes = "vec", tag = "1")]
    #[allow(missing_docs)]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "2")]
    #[allow(missing_docs)]
    pub slot: u64,
    /// ... other shred metadata (type, flags, etc.)
    #[prost(uint32, tag = "3")]
    #[allow(missing_docs)]
    pub index: u32,
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShredBatch {
    #[prost(message, repeated, tag = "1")]
    #[allow(missing_docs)]
    pub shreds: ::prost::alloc::vec::Vec<Shred>,
    /// Timestamp when batch was created/sent
    #[prost(uint64, tag = "2")]
    #[allow(missing_docs)]
    pub timestamp_ns: u64,
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Packet {
    /// Raw transaction packet data.
    #[prost(bytes = "vec", tag = "1")]
    #[allow(missing_docs)]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// Metadata associated with the packet.
    #[prost(message, optional, tag = "2")]
    #[allow(missing_docs)]
    pub meta: ::core::option::Option<PacketMeta>,
}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PacketMeta {
    /// Source/destination port if relevant.
    #[prost(uint32, tag = "1")]
    #[allow(missing_docs)]
    pub port: u32,
    /// Source/destination address if relevant.
    #[prost(uint64, tag = "2")]
    #[allow(missing_docs)]
    pub addr: u64,
    /// Validator stake if relevant for routing.
    #[prost(uint32, tag = "3")]
    #[allow(missing_docs)]
    pub stake: u32,
    /// Hint if it's a vote transaction.
    #[prost(bool, tag = "4")]
    #[allow(missing_docs)]
    pub is_simple_vote_tx: bool,
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PacketBatch {
    /// Batch of packets.
    #[prost(message, repeated, tag = "1")]
    #[allow(missing_docs)]
    pub packets: ::prost::alloc::vec::Vec<Packet>,
    /// Header for the batch.
    #[prost(message, optional, tag = "2")]
    #[allow(missing_docs)]
    pub header: ::core::option::Option<BatchHeader>,
}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BatchHeader {
    /// Timestamp for the batch.
    #[prost(uint64, tag = "1")]
    #[allow(missing_docs)]
    pub ts: u64,
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BroadcastPacketBatchResponse {
    /// Response could be simple acknowledgment or include details about processing.
    ///
    /// e.g., "received", "failed"
    #[prost(string, tag = "1")]
    #[allow(missing_docs)]
    pub status: ::prost::alloc::string::String,
    /// Optional message
    #[prost(string, tag = "2")]
    #[allow(missing_docs)]
    pub message: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod block_engine_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service for sending bundles (typically part of Block Engine gRPC)
    #[derive(Debug, Clone)]
    pub struct BlockEngineClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BlockEngineClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BlockEngineClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BlockEngineClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            BlockEngineClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Sends a bundle of transactions.
        pub async fn send_bundle(
            &mut self,
            request: impl tonic::IntoRequest<super::SendBundleRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SendBundleResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/jito.BlockEngine/SendBundle",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("jito.BlockEngine", "SendBundle"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod shred_stream_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service for receiving shreds (ShredStream)
    #[derive(Debug, Clone)]
    pub struct ShredStreamClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ShredStreamClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ShredStreamClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ShredStreamClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ShredStreamClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Subscribes to a stream of shreds.
        pub async fn subscribe_shreds(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeShredsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ShredBatch>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/jito.ShredStream/SubscribeShreds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("jito.ShredStream", "SubscribeShreds"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Example: Method to send a batch of packets (might be for testing or specific use cases)
        /// This was in the original ops-node code, so including a placeholder.
        /// This might not be part of the typical public ShredStream service for *receiving* shreds.
        /// It could be part of a different Jito service or an internal API.
        pub async fn broadcast_packet_batch(
            &mut self,
            request: impl tonic::IntoRequest<super::PacketBatch>,
        ) -> std::result::Result<
            tonic::Response<super::BroadcastPacketBatchResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/jito.ShredStream/BroadcastPacketBatch",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("jito.ShredStream", "BroadcastPacketBatch"));
            self.inner.unary(req, path, codec).await
        }
    }
}
