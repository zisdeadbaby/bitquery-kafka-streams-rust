// This file is @generated by prost-build.
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeRequest {
    /// Filters for accounts, slots, transactions, etc.
    #[prost(map = "string, message", tag = "1")]
    #[allow(missing_docs)]
    pub accounts: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        SubscribeRequestFilterAccounts,
    >,
    #[prost(map = "string, message", tag = "2")]
    #[allow(missing_docs)]
    pub slots: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        SubscribeRequestFilterSlots,
    >,
    #[prost(map = "string, message", tag = "3")]
    #[allow(missing_docs)]
    pub transactions: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        SubscribeRequestFilterTransactions,
    >,
    #[prost(map = "string, message", tag = "4")]
    #[allow(missing_docs)]
    pub blocks: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        SubscribeRequestFilterBlocks,
    >,
    #[prost(map = "string, message", tag = "5")]
    #[allow(missing_docs)]
    pub blocks_meta: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        SubscribeRequestFilterBlocksMeta,
    >,
    #[prost(map = "string, message", tag = "6")]
    #[allow(missing_docs)]
    pub entry: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        SubscribeRequestFilterEntry,
    >,
    #[prost(enumeration = "CommitmentLevel", optional, tag = "7")]
    #[allow(missing_docs)]
    pub commitment: ::core::option::Option<i32>,
    /// For keepalive, if supported this way
    #[prost(message, optional, tag = "10")]
    #[allow(missing_docs)]
    pub ping: ::core::option::Option<Ping>,
    #[prost(enumeration = "CommitmentLevelV2", optional, tag = "11")]
    #[allow(missing_docs)]
    pub commitment_v2: ::core::option::Option<i32>,
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeRequestFilterAccounts {
    #[prost(string, repeated, tag = "1")]
    #[allow(missing_docs)]
    pub account: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// ... other filter options
    #[prost(string, repeated, tag = "2")]
    #[allow(missing_docs)]
    pub owner: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubscribeRequestFilterSlots {}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubscribeRequestFilterTransactions {}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubscribeRequestFilterBlocks {}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubscribeRequestFilterBlocksMeta {}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubscribeRequestFilterEntry {}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeUpdate {
    #[prost(oneof = "subscribe_update::UpdateOneof", tags = "1, 2, 3, 4, 5, 6")]
    #[allow(missing_docs)]
    pub update_oneof: ::core::option::Option<subscribe_update::UpdateOneof>,
}
/// Nested message and enum types in `SubscribeUpdate`.
pub mod subscribe_update {
    #[allow(missing_docs)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum UpdateOneof {
        #[prost(message, tag = "1")]
        #[allow(missing_docs)]
        Account(super::AccountUpdate),
        #[prost(message, tag = "2")]
        #[allow(missing_docs)]
        Slot(super::SlotUpdate),
        #[prost(message, tag = "3")]
        #[allow(missing_docs)]
        Transaction(super::TransactionUpdate),
        #[prost(message, tag = "4")]
        #[allow(missing_docs)]
        Block(super::BlockUpdate),
        /// Example pong message
        #[prost(message, tag = "5")]
        #[allow(missing_docs)]
        Pong(super::Ping),
        /// For unknown or keep-alive updates
        #[prost(message, tag = "6")]
        #[allow(missing_docs)]
        Empty(super::Empty),
    }
}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccountUpdate {
    #[prost(bytes = "vec", tag = "1")]
    #[allow(missing_docs)]
    pub pubkey: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "2")]
    #[allow(missing_docs)]
    pub lamports: u64,
    #[prost(bytes = "vec", tag = "3")]
    #[allow(missing_docs)]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "4")]
    #[allow(missing_docs)]
    pub executable: bool,
    #[prost(uint64, tag = "5")]
    #[allow(missing_docs)]
    pub rent_epoch: u64,
    #[prost(bytes = "vec", tag = "6")]
    #[allow(missing_docs)]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "7")]
    #[allow(missing_docs)]
    pub slot: u64,
    /// ... more fields
    #[prost(bool, tag = "8")]
    #[allow(missing_docs)]
    pub is_startup: bool,
}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SlotUpdate {
    #[prost(uint64, tag = "1")]
    #[allow(missing_docs)]
    pub slot: u64,
    #[prost(uint64, tag = "2")]
    #[allow(missing_docs)]
    pub parent: u64,
    #[prost(enumeration = "SlotStatus", tag = "3")]
    #[allow(missing_docs)]
    pub status: i32,
    #[prost(uint64, tag = "4")]
    #[allow(missing_docs)]
    pub timestamp: u64,
}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransactionUpdate {
    /// ... transaction fields
    #[prost(uint64, tag = "1")]
    #[allow(missing_docs)]
    pub slot: u64,
}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlockUpdate {
    /// ... block fields
    #[prost(uint64, tag = "1")]
    #[allow(missing_docs)]
    pub slot: u64,
}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ping {
    #[prost(uint64, tag = "1")]
    #[allow(missing_docs)]
    pub id: u64,
}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {}
#[allow(missing_docs)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSlotRequest {}
#[allow(missing_docs)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SlotInfo {
    #[prost(uint64, tag = "1")]
    #[allow(missing_docs)]
    pub slot: u64,
    #[prost(uint64, tag = "2")]
    #[allow(missing_docs)]
    pub parent: u64,
    /// e.g., "processed", "confirmed", "finalized"
    #[prost(string, tag = "3")]
    #[allow(missing_docs)]
    pub status: ::prost::alloc::string::String,
}
#[allow(missing_docs)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CommitmentLevel {
    #[allow(missing_docs)]
    Processed = 0,
    #[allow(missing_docs)]
    Confirmed = 1,
    #[allow(missing_docs)]
    Finalized = 2,
}
impl CommitmentLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Processed => "PROCESSED",
            Self::Confirmed => "CONFIRMED",
            Self::Finalized => "FINALIZED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PROCESSED" => Some(Self::Processed),
            "CONFIRMED" => Some(Self::Confirmed),
            "FINALIZED" => Some(Self::Finalized),
            _ => None,
        }
    }
}
#[allow(missing_docs)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CommitmentLevelV2 {
    #[allow(missing_docs)]
    ProcessedV2 = 0,
    #[allow(missing_docs)]
    ConfirmedV2 = 1,
    #[allow(missing_docs)]
    FinalizedV2 = 2,
    #[allow(missing_docs)]
    RootedV2 = 3,
}
impl CommitmentLevelV2 {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ProcessedV2 => "PROCESSED_V2",
            Self::ConfirmedV2 => "CONFIRMED_V2",
            Self::FinalizedV2 => "FINALIZED_V2",
            Self::RootedV2 => "ROOTED_V2",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PROCESSED_V2" => Some(Self::ProcessedV2),
            "CONFIRMED_V2" => Some(Self::ConfirmedV2),
            "FINALIZED_V2" => Some(Self::FinalizedV2),
            "ROOTED_V2" => Some(Self::RootedV2),
            _ => None,
        }
    }
}
#[allow(missing_docs)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SlotStatus {
    #[allow(missing_docs)]
    Unspecified = 0,
    #[allow(missing_docs)]
    SlotProcessed = 1,
    #[allow(missing_docs)]
    SlotConfirmed = 2,
    /// Typically finalized means rooted
    #[allow(missing_docs)]
    SlotRooted = 3,
}
impl SlotStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SLOT_STATUS_UNSPECIFIED",
            Self::SlotProcessed => "SLOT_PROCESSED",
            Self::SlotConfirmed => "SLOT_CONFIRMED",
            Self::SlotRooted => "SLOT_ROOTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SLOT_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "SLOT_PROCESSED" => Some(Self::SlotProcessed),
            "SLOT_CONFIRMED" => Some(Self::SlotConfirmed),
            "SLOT_ROOTED" => Some(Self::SlotRooted),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod geyser_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct GeyserClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl GeyserClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> GeyserClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> GeyserClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            GeyserClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn subscribe(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SubscribeUpdate>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/yellowstone.Geyser/Subscribe",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("yellowstone.Geyser", "Subscribe"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn get_slot(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSlotRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SlotInfo>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/yellowstone.Geyser/GetSlot",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("yellowstone.Geyser", "GetSlot"));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
