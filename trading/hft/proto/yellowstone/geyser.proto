syntax = "proto3";

package yellowstone;

// This is a placeholder proto file for Yellowstone Geyser.
// The actual geyser.proto file is much more extensive and typically provided
// by the Geyser plugin source or the gRPC provider (e.g., Triton, Helius).
//
// You would replace this with the official .proto file content.
//
// Example messages (highly simplified and not official):

service Geyser {
  rpc Subscribe (SubscribeRequest) returns (stream SubscribeUpdate) {}
  rpc GetSlot (GetSlotRequest) returns (stream SlotInfo) {} // Example, might be unary or part of Subscribe
}

message SubscribeRequest {
  // Filters for accounts, slots, transactions, etc.
  map<string, SubscribeRequestFilterAccounts> accounts = 1;
  map<string, SubscribeRequestFilterSlots> slots = 2;
  map<string, SubscribeRequestFilterTransactions> transactions = 3;
  map<string, SubscribeRequestFilterBlocks> blocks = 4;
  map<string, SubscribeRequestFilterBlocksMeta> blocks_meta = 5;
  map<string, SubscribeRequestFilterEntry> entry = 6;

  optional CommitmentLevel commitment = 7;
  optional Ping ping = 10; // For keepalive, if supported this way
  optional CommitmentLevelV2 commitment_v2 = 11;
}

message SubscribeRequestFilterAccounts {
  repeated string account = 1;
  repeated string owner = 2;
  // ... other filter options
}
message SubscribeRequestFilterSlots {}
message SubscribeRequestFilterTransactions {}
message SubscribeRequestFilterBlocks {}
message SubscribeRequestFilterBlocksMeta {}
message SubscribeRequestFilterEntry {}


message SubscribeUpdate {
  oneof update_oneof {
    AccountUpdate account = 1;
    SlotUpdate slot = 2;
    TransactionUpdate transaction = 3;
    BlockUpdate block = 4;
    Ping pong = 5; // Example pong message
    Empty empty = 6; // For unknown or keep-alive updates
  }
}

message AccountUpdate {
  bytes pubkey = 1;
  uint64 lamports = 2;
  bytes owner = 3;
  bool executable = 4;
  uint64 rent_epoch = 5;
  bytes data = 6;
  uint64 slot = 7;
  bool is_startup = 8;
  // ... more fields
}

message SlotUpdate {
  uint64 slot = 1;
  uint64 parent = 2;
  SlotStatus status = 3;
  uint64 timestamp = 4;
}

message TransactionUpdate {
  // ... transaction fields
  uint64 slot = 1;
}

message BlockUpdate {
  // ... block fields
  uint64 slot = 1;
}

message Ping {
  uint64 id = 1;
}

message Empty {}


message GetSlotRequest {}

message SlotInfo {
  uint64 slot = 1;
  uint64 parent = 2;
  string status = 3; // e.g., "processed", "confirmed", "finalized"
}

enum CommitmentLevel {
  PROCESSED = 0;
  CONFIRMED = 1;
  FINALIZED = 2;
}

enum CommitmentLevelV2 {
  PROCESSED_V2 = 0;
  CONFIRMED_V2 = 1;
  FINALIZED_V2 = 2;
  ROOTED_V2 = 3;
}


enum SlotStatus {
  option allow_alias = true;
  SLOT_STATUS_UNSPECIFIED = 0;
  SLOT_PROCESSED = 1;
  SLOT_CONFIRMED = 2;
  SLOT_ROOTED = 3; // Typically finalized means rooted
  SLOT_FINALIZED = 3; // Alias for ROOTED
}
