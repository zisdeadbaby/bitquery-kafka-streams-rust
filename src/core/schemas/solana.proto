syntax = "proto3";

package solana;

// Common header for all block messages
message BlockHeader {
    int64 slot = 1;
    int64 block_height = 2;
    string block_time = 3; // Consider using google.protobuf.Timestamp for standardized time
    int64 parent_slot = 4;
    string previous_blockhash = 5;
}

// Account info, often part of Transaction details
message Account {
    string address = 1;
    int64 pre_balance = 2;
    int64 post_balance = 3;
    bool is_writable = 4;
    bool is_signer = 5;
    TokenInfo token = 6; // Optional token info if this account is a token account
}

// Token information, potentially part of Account or standalone for token-specific events
message TokenInfo {
    string mint = 1;       // Mint address of the token
    string owner = 2;      // Owner of this token account
    string program_id = 3; // Token program ID (e.g., TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA)
    uint64 amount = 4;     // Raw token amount (needs decimals for UI representation)
    uint32 decimals = 5;   // Number of decimal places for the token
}

// Instruction data within a transaction
message Instruction {
    string program_id = 1;              // Program ID the instruction is for
    repeated Account accounts = 2;      // Accounts involved in this instruction
    bytes data = 3;                     // Raw instruction data (often Base58 or Base64 encoded by sources)
    string parsed = 4;                  // Optional: JSON string of parsed instruction if available from source
    int32 index = 5;                    // Instruction index within the transaction
    repeated InnerInstruction inner_instructions = 6; // Inner instructions invoked by this one
}

// Inner instruction, executed as part of a parent instruction
message InnerInstruction {
    string program_id = 1;
    repeated Account accounts = 2;
    bytes data = 3;
    int32 index = 4; // Index relative to parent instruction's inner instructions
}

// Balance update for an account, often part of transaction metadata
message BalanceUpdate {
    string account = 1;  // Account address
    string mint = 2;     // Mint address (SOL or SPL token)
    int64 pre_balance = 3; // Balance before transaction
    int64 post_balance = 4;// Balance after transaction
}

// Represents a single Solana transaction
message Transaction {
    string signature = 1;        // Transaction signature
    bool success = 2;            // True if transaction succeeded, false otherwise
    string error = 3;            // Error message if transaction failed (can be complex JSON string)
    string signer = 4;           // Primary signer (fee payer) of the transaction
    uint64 fee = 5;              // Transaction fee in lamports
    repeated Account accounts = 6; // List of all accounts involved in the transaction
    repeated Instruction instructions = 7; // Instructions executed
    repeated BalanceUpdate balance_updates = 8; // SOL and Token balance changes
    repeated string logs = 9;    // Log messages emitted during transaction execution
}

// Main block message containing header and transactions
message BlockMessage {
    BlockHeader header = 1;
    repeated Transaction transactions = 2;
}

// Represents a token transfer event
message TokenTransfer {
    string signature = 1;    // Transaction signature where transfer occurred
    string from = 2;         // Source token account address
    string to = 3;           // Destination token account address
    string mint = 4;         // Mint address of the token transferred
    uint64 amount = 5;       // Raw amount of tokens transferred
    uint32 decimals = 6;     // Decimals of the token
    string block_time = 7;   // Timestamp of the block
    // Consider adding from_owner and to_owner if available and useful
}

// Block message specifically for token transfers
message TokenBlockMessage {
    BlockHeader header = 1;
    repeated TokenTransfer transfers = 2;
}

// Represents a DEX trade event
message DexTrade {
    string signature = 1;     // Transaction signature of the trade
    string program_id = 2;    // DEX program ID
    string market = 3;        // Market address (e.g., Serum market ID, Raydium pool ID)
    string side = 4;          // "BUY" or "SELL" (or "BID"/"ASK")
    string price = 5;         // Price of the trade (string to maintain precision)
    string amount_base = 6;   // Amount of the base currency traded (string for precision)
    string amount_quote = 7;  // Amount of the quote currency traded (string for precision)
    string base_mint = 8;     // Mint address of the base currency
    string quote_mint = 9;    // Mint address of the quote currency
    string maker = 10;        // Address of the maker side of the trade
    string taker = 11;        // Address of the taker side of the trade
    string block_time = 12;   // Timestamp of the block
}

// Block message for parsed DEX trades
message DexParsedBlockMessage {
    BlockHeader header = 1;
    repeated DexTrade trades = 2;
}
