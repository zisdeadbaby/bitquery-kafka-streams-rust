apiVersion: apps/v1
kind: Deployment
metadata:
  name: bitquery-kafka-consumer
  namespace: bitquery
  labels:
    app: bitquery-kafka-consumer
    version: blue
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: bitquery-kafka-consumer
  template:
    metadata:
      labels:
        app: bitquery-kafka-consumer
        version: blue
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: bitquery-kafka-consumer
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      containers:
      - name: bitquery-kafka-consumer
        image: your-registry.com/bitquery-solana-kafka:latest
        imagePullPolicy: Always
        
        ports:
        - name: health
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        env:
        - name: HEALTH_CHECK_PORT
          value: "8080"
        - name: PROMETHEUS_PORT
          value: "9090"
        - name: RUST_LOG
          value: "info,bitquery_solana_kafka=debug"
        - name: KAFKA_GROUP_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        envFrom:
        - secretRef:
            name: bitquery-kafka-secrets
        - configMapRef:
            name: bitquery-kafka-config
        
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        
        livenessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: health
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: certs
          mountPath: /app/certs
          readOnly: true
        - name: logs
          mountPath: /app/logs
      
      volumes:
      - name: config
        configMap:
          name: bitquery-kafka-config
      - name: certs
        secret:
          secretName: bitquery-kafka-certs
          defaultMode: 0600
      - name: logs
        emptyDir: {}
      
      nodeSelector:
        node-type: compute
      
      tolerations:
      - key: "compute-only"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - bitquery-kafka-consumer
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: bitquery-kafka-consumer-service
  namespace: bitquery
  labels:
    app: bitquery-kafka-consumer
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  selector:
    app: bitquery-kafka-consumer
  ports:
  - name: health
    port: 8080
    targetPort: health
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bitquery-kafka-consumer
  namespace: bitquery

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bitquery-kafka-config
  namespace: bitquery
data:
  KAFKA_BROKERS: "kafka-solana.bitquery.io:9093,kafka-solana-2.bitquery.io:9093,kafka-solana-3.bitquery.io:9093"
  KAFKA_TOPIC: "solana.dextrades.proto"
  KAFKA_SECURITY_PROTOCOL: "SASL_PLAINTEXT"
  PROMETHEUS_PORT: "9090"
  HEALTH_CHECK_PORT: "8080"
  LOG_LEVEL: "info"

---
apiVersion: v1
kind: Secret
metadata:
  name: bitquery-kafka-secrets
  namespace: bitquery
type: Opaque
stringData:
  KAFKA_USERNAME: "solana_113"
  KAFKA_PASSWORD: "your_password_here"  # Update with actual password
  DATABASE_URL: "postgresql://user:pass@postgres:5432/bitquery_kafka"

---
apiVersion: v1
kind: Secret
metadata:
  name: bitquery-kafka-certs
  namespace: bitquery
type: Opaque
data:
  # Base64 encoded certificates (if using SSL)
  # kafka-ca.pem: LS0tLS1CRUdJTi...
  # kafka-cert.pem: LS0tLS1CRUdJTi...
  # kafka-key.pem: LS0tLS1CRUdJTi...
